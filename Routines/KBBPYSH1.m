KBBPYSH1	;ISC-SF/JLI - SHOW KEY STRUCTURE AND VARIABLES FOR FILE ;02/26/16  15:21;
	;;0.0;KBBPTOOLS;;May 15, 1992
	;A6AXFSH1 ;ISC-SF/JLI - SHOW KEY STRUCTURE AND VARIABLES FOR FILE ;5/15/92  13:26 ;
	;;2.0; ;;May 15, 1992
	I $T(EN^%ut)="" W !,"Can't run unit tests" Q
	D EN^%ut("KBBPUYNM")
	Q
	;
SHOW(KBBPFN)	; called from KBBPYSHO
	S ISUTEST=$$ISUTEST()
	S KBBPFIL=$P(^TMP("KBBPY",$J,"SHO",KBBPFN),U,2)
	S KBBPFILY=KBBPFIL_" FILE"
	S KBBPFN=+^TMP("KBBPY",$J,"SHO",KBBPFN)
	S KBBPNUM=$P(^XTMP("KBBPY","FNM",KBBPFIL,KBBPFN),U)
	S KBBP1="",KBBPNN=-1
	F KBBPK=1:1 S KBBPX=$P(KBBPNUM,";",KBBPK) Q:KBBPX=""  D
	. S KBBP1=KBBPX_$S(KBBP1'="":";"_KBBP1,1:"")
	. S KBBPNN=KBBPNN+1
	. Q
	S KBBPNUM=KBBP1
	S KBBPTOP=$P(KBBPNUM,";",1)
	S KBBPFLD=.01
	S KBBPDIC=$S($D(^DIC(KBBPTOP,0,"GL")):^("GL"),1:"")
	D HEDR
	S KBBPA="      ",KBBPF=KBBPFN S KBBPN="" F KBBPI=0:0 S KBBPN=$O(^DD(KBBPFN,"B",KBBPN)) Q:KBBPN=""  S KBBPFLD=$O(^(KBBPN,0)) I KBBPFLD'=.01 S KBBPNAM=KBBPN D SHOVAR I (IOSL-4)<$Y S KBBPXV="" S KBBPXV=$$CHEK Q:KBBPXV=U  D HEDR
	S KBBPX="" F KBBPI=0:0 S KBBPI=$O(^DD(KBBPFN,"SB",KBBPI)) Q:KBBPI'>0  I $P(^DD(KBBPI,.01,0),U,2)'["W" S KBBPX=1 Q
	I KBBPX="" F KBBPI=0:0 S KBBPI=$O(^DD(KBBPFN,0,"PT",KBBPI)) Q:KBBPI'>0  I KBBPI'=KBBPFN S KBBPX=1 Q
	I KBBPX="" Q
	I ISUTEST S KBBPX=""
	I 'ISUTEST R !!,"Want Related Tables Listed?  Y// ",KBBPX:DTIME S:'$T!(KBBPX[U) KBBPX=U
	S:KBBPX="" KBBPX="Y"
	I "Yy"[$E(KBBPX) S KBBPASK="" D SHOW1^KBBPYREL(KBBPFIL,KBBPFN)
	Q
	;
SHOVAR	;
	S KBBPTYPE="",KBBPNOD0=^DD(KBBPF,KBBPFLD,0)
	I $E(KBBPNAM)="*",$D(^DD(KBBPF,"B",$E(KBBPNAM,2,30),KBBPFLD)) Q
	I $P(KBBPNOD0,U,1)="*"_KBBPNAM S KBBPNAM="*"_KBBPNAM
	S KBBPLOC=$P($P(KBBPNOD0,U,4),";",2)
	I KBBPLOC=0 S KBBPX1=+$P(KBBPNOD0,U,2) S:'$D(^DD(KBBPX1,.01,0)) KBBPTYPE="*** WARNING: Sub-file NOT DEFINED ***" I $D(^(0)) S KBBPX1=$P(^DD(KBBPX1,.01,0),U,2) Q:KBBPX1'["W"  S KBBPTYPE="Word-Processing or Long"
	S KBBPTYPE=$S(KBBPTYPE'="":KBBPTYPE,KBBPLOC=" ":"Computed",$E(KBBPLOC)="E":"Free Text "_($P(KBBPLOC,",",2)-$E($P(KBBPLOC,","),2,99))_" chars",1:"") I KBBPTYPE="" S KBBPTYPE=$$TYPE(KBBPNOD0)
	I KBBPFLD=.01 S KBBPNAM=$O(^DD(KBBPF,0,"NM",""))_"("_KBBPF_") - "_KBBPNAM S KBBPXREF=$$XREF(KBBPF,KBBPFLD,KBBPDIC) S KBBPA=$E(KBBPXREF_"          ",1,9)_" KEY - "
	I KBBPFLD'=.01 S KBBPXREF=$$XREF(KBBPF,KBBPFLD,KBBPDIC) S KBBPA=$E(KBBPXREF_"         ",1,9)
	D WRITEIT(KBBPA_KBBPNAM_" .... ("_KBBPTYPE_")")
	Q
	;
HEDR	;
	S KBBPN1=KBBPNN
	D WRITEIT("@IOF"),WRITEIT("")
	D WRITEIT($$INDENT^KBBPYSET((IOM-$L(KBBPFILY))\2)_KBBPFILY),WRITEIT("")
	S KBBPA="KEY - ",KBBPOLD=KBBPFLD,KBBPFLD=.01
	F KBBPK1=1:1 S KBBPF=$P(KBBPNUM,";",KBBPK1) Q:KBBPF=""  D
	. S KBBPNAM=$P(^DD(KBBPF,.01,0),U,1)
	. S KBBPNN=KBBPK1-1
	. D SHOVAR
	. Q
	S KBBPA="      ",KBBPFLD=KBBPOLD,KBBPF=KBBPFN,KBBPNN=KBBPN1 D WRITEIT("")
	Q
	;
CHEK()	;.EF
	N VALUE
	I $$ISUTEST S VALUE=U
	I '$$ISUTEST() R !?15,"Enter '^' to STOP or <ret> to continue...",VALUE:DTIME S:'$T!(VALUE[U) VALUE=U
	Q VALUE
	;
TYPE(KBBPNOD0)	;.EF - return description, if possible, for field type
	; KBBPNOD0 - input - zero node for field
	N KBBPTYPE,KBBPVAL
	S KBBPVAL=""
	S KBBPTYPE=$P(KBBPNOD0,U,2)
	I KBBPTYPE["F" S KBBPVAL="Free Text, "_(+$P($P(KBBPNOD0,U,5,99),"<",2))_" to "_(+$P($P(KBBPNOD0,U,5,99),">",2))_" chars"
	I KBBPVAL="",KBBPTYPE["S" S KBBPVAL="Set of Codes"
	I KBBPVAL="",KBBPTYPE["D" S KBBPVAL="Date"
	I KBBPVAL="",KBBPTYPE["N" S KBBPVAL="Numeric, "_(+$P(KBBPTYPE,"J",2))_" digits, "_+$P(KBBPTYPE,",",2)_" decimals places"
	I KBBPVAL="",KBBPTYPE["P" S KBBPVAL=+$P(KBBPTYPE,"P",2),KBBPVAL="pointer to entry in "_$O(^DD(KBBPVAL,0,"NM",""))_" file"
	I KBBPVAL="" W:'$$ISUTEST() !,"Unhandled type KBBPTYPE=",KBBPTYPE S KBBPVAL="Unhandled type KBBPTYPE="_KBBPTYPE
	Q KBBPVAL
	;
XREF(KBBPF,KBBPFLD,KBBPDIC)	;.EF - returns standard cross-ref for field, if any
	; KBBPF   - input - file number
	; KBBPFLD - input - field number
	; KBBPDIC - input - global base for data file (e.g., "^VA(200," for NEW PERSON)
	N KBBPK,KBBPXK,KBBPXREF
	S KBBPXREF=""
	F KBBPK=0:0 S KBBPK=$O(^DD(KBBPF,KBBPFLD,1,KBBPK)) Q:KBBPK'>0  I $D(^(KBBPK,1)) S KBBPXK=^(1) I $E(KBBPXK,1,2)="S " S KBBPXK=$P(KBBPXK,KBBPDIC,2) I KBBPXK'="" D  I KBBPXREF'="" Q
	. S KBBPXREF=$P(KBBPXK,","),KBBPXK=$P(KBBPXK,",",2,99)
	. D CHKX(.KBBPXREF,KBBPXK,KBBPNN)
	. Q
	I KBBPXREF'="",KBBPXREF["""" S KBBPXREF=$P(KBBPXREF,"""",2)
	Q KBBPXREF
	;
CHKX(KBBPXREF,KBBPXK,KBBPNN)	; Determine whether cross-reference fits standard pattern for look-up
	; KBBPXREF - passed by reference
	N KBBPM,KBBPXVAL
	S KBBPXVAL=$P(KBBPXK,",DA"),KBBPXK="DA"_$P(KBBPXK,",DA",2,99) I ($E(KBBPXVAL,1,19)'="$$UP^XLFSTR($E(X,1,")&($E(KBBPXVAL,1,7)'="$E(X,1,"),(KBBPXVAL'="X") S KBBPXREF="" Q
	I KBBPNN>0 F KBBPM=KBBPNN:-1:1 S KBBPXVAL=$P(KBBPXK,","),KBBPXK=$P(KBBPXK,",",2,99) Q:KBBPXVAL'=("DA("_KBBPM_")")
	I $P(KBBPXK,"=")'="DA)" S KBBPXREF=""
	Q
	;
WRITEIT(TEXT,NOLINFED)	; write to output device, or global for unit tests
	; TEXT     - input - text to be output
	; NOLINFED - input - optional - if set to 1, no line feed is issued before the text is output
	; ZEXCEPT: LINESOUT - counter for lines used by unit tests newed in unit tests
	S NOLINFED=+$G(NOLINFED)
	I 'NOLINFED S LINESOUT=$G(LINESOUT)+1
	I TEXT="@IOF" S LINESOUT=0
	D WRITEOUT^KBBPYROU(TEXT,$G(NOLINFED))
	Q
	;
ISUTEST()	;
	I $T(ISUTEST^%ut)="" Q 0
	Q $$ISUTEST^%ut()
